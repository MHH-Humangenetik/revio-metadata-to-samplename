name: Build and Release

on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
  pull_request:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.25.1"
          check-latest: true

      - name: Check out code
        uses: actions/checkout@v2

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goarch: arm64
            goos: windows

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.21"
          check-latest: true

      - name: Check out code
        uses: actions/checkout@v2

      - name: Get dependencies
        run: go mod download

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Create build directory
          mkdir -p build

          # Set binary extension based on OS
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME=revio-metadata-to-samplename.exe
          else
            BINARY_NAME=revio-metadata-to-samplename
          fi

          # Build the binary
          go build -v -o "build/${{ matrix.goos }}-${{ matrix.goarch }}/${BINARY_NAME}" .

          # Create archive with README and LICENSE
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -j "revio-metadata-to-samplename_${{ matrix.goos }}-${{ matrix.goarch }}.zip" "build/${{ matrix.goos }}-${{ matrix.goarch }}/${BINARY_NAME}" README.md LICENSE
          else
            # For tar, we need to handle the directory structure differently
            cp README.md LICENSE "build/${{ matrix.goos }}-${{ matrix.goarch }}/"
            tar -czf "revio-metadata-to-samplename_${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" -C build/${{ matrix.goos }}-${{ matrix.goarch }} "${BINARY_NAME}" README.md LICENSE
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: revio-metadata-to-samplename-_${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            revio-metadata-to-samplename_${{ matrix.goos }}-${{ matrix.goarch }}.*
  docker:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Push Docker Image
    strategy:
      matrix:
        target: [base, ubuntu]
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/mhh-humangenetik/revio-metadata-to-samplename
          # prefix on ubuntu images
          flavor: |
            prefix=${{ matrix.target == 'ubuntu' && 'ubuntu-' || '' }}
            latest=auto
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          target: ${{ matrix.target }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
